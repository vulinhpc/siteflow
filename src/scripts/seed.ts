/* eslint-disable no-console */
import { db } from '@/db';
import { categoriesSchema, dailyLogsSchema, dailyLogTasksSchema, organizationSchema, projectsSchema, tasksSchema } from '@/models/Schema';

async function seed() {
  console.log('üå± Starting seed...');

  try {
    console.log('‚úÖ Using database connection');

    // 1. T·∫°o organization m·∫´u
    const orgData = {
      id: 'org_sample_123',
      stripeCustomerId: 'cus_sample_123',
      stripeSubscriptionStatus: 'active' as const,
    };

    try {
      await db.insert(organizationSchema).values(orgData);
      console.log('‚úÖ Organization created:', orgData.id);
    } catch (error) {
      console.log('‚ÑπÔ∏è Organization already exists:', orgData.id);
    }

    // 2. T·∫°o 35+ projects m·∫´u
    const projectNames = [
      'D·ª± √°n nh√† ph·ªë 3 t·∫ßng',
'Chung c∆∞ cao c·∫•p',
'Bi·ªát th·ª± ven s√¥ng',
'Nh√† x∆∞·ªüng c√¥ng nghi·ªáp',
      'Trung t√¢m th∆∞∆°ng m·∫°i',
'B·ªánh vi·ªán ƒëa khoa',
'Tr∆∞·ªùng h·ªçc qu·ªëc t·∫ø',
'Kh√°ch s·∫°n 5 sao',
      'VƒÉn ph√≤ng cho thu√™',
'Khu d√¢n c∆∞ cao c·∫•p',
'Nh√† m√°y s·∫£n xu·∫•t',
'Kho b√£i logistics',
      'Trung t√¢m h·ªôi ngh·ªã',
'S√¢n v·∫≠n ƒë·ªông',
'B·∫£o t√†ng ngh·ªá thu·∫≠t',
'Th∆∞ vi·ªán c√¥ng c·ªông',
      'Trung t√¢m y t·∫ø',
'Nh√† ga t√†u ƒëi·ªán',
'C·∫ßu v∆∞·ª£t s√¥ng',
'ƒê∆∞·ªùng cao t·ªëc',
      'Khu du l·ªãch sinh th√°i',
'Resort bi·ªÉn',
'Golf course',
'S√¢n bay t∆∞ nh√¢n',
      'Nh√† m√°y ƒëi·ªán m·∫∑t tr·ªùi',
'Tr·∫°m x·ª≠ l√Ω n∆∞·ªõc',
'Khu c√¥ng ngh·ªá cao',
'Trung t√¢m d·ªØ li·ªáu',
      'Nh√† m√°y l·ªçc d·∫ßu',
'Khu ch·∫ø xu·∫•t',
'C·∫£ng bi·ªÉn',
'S√¢n bay qu·ªëc t·∫ø',
      'T√≤a nh√† vƒÉn ph√≤ng',
'Chung c∆∞ t·∫ßm trung',
'Nh√† ph·ªë li·ªÅn k·ªÅ',
'Bi·ªát th·ª± bi·ªÉn',
      'Khu ƒë√¥ th·ªã m·ªõi',
'Trung t√¢m th∆∞∆°ng m·∫°i',
'B·ªánh vi·ªán t∆∞ nh√¢n',
'Tr∆∞·ªùng ƒë·∫°i h·ªçc',
    ];

    const statuses = ['PLANNING', 'IN_PROGRESS', 'ON_HOLD', 'COMPLETED', 'CANCELLED'] as const;
    const projects = [];

    for (let i = 0; i < 35; i++) {
      const name = `${projectNames[i % projectNames.length]} ${i + 1}`;
      const status = statuses[i % statuses.length];
      const budget = 1000000000 + (i * 100000000); // 1B to 4.5B
      const startDate = new Date(2024, 0, 1 + (i * 10));
      const endDate = new Date(2024, 11, 31 - (i * 5));

      const projectData = {
        id: `project_${i + 1}`,
        orgId: 'org_sample_123',
        name,
        description: `M√¥ t·∫£ chi ti·∫øt cho ${name}`,
        status,
        budget: budget.toString(),
        startDate,
        endDate,
        address: `ƒê·ªãa ch·ªâ ${i + 1}, TP.HCM`,
        clientName: `Kh√°ch h√†ng ${i + 1}`,
        clientContact: `090${String(i).padStart(7, '0')}`,
      };

      try {
        const result = await db.insert(projectsSchema).values(projectData).returning({ id: projectsSchema.id, name: projectsSchema.name });
        projects.push(result[0]);
      } catch (error) {
        console.log(`‚ÑπÔ∏è Project ${i + 1} already exists`);
        projects.push({ id: projectData.id, name: projectData.name });
      }
    }

    console.log('‚úÖ Projects created:', projects.length);

    // 3. T·∫°o category m·∫´u cho project ƒë·∫ßu ti√™n
    const categoryData = {
      id: 'category_1',
      orgId: 'org_sample_123',
      projectId: projects[0].id,
      name: 'Ph·∫ßn m√≥ng v√† t·∫ßng tr·ªát',
      description: 'Thi c√¥ng ph·∫ßn m√≥ng, t·∫ßng tr·ªát v√† h·∫ßm',
      budget: '800000000.00',
      order: 1,
    };

    try {
      await db.insert(categoriesSchema).values(categoryData);
      console.log('‚úÖ Category created:', categoryData.name);
    } catch (error) {
      console.log('‚ÑπÔ∏è Category already exists');
    }

    // 4. T·∫°o tasks m·∫´u cho project ƒë·∫ßu ti√™n
    const tasksData = [
      {
        id: 'task_1',
        orgId: 'org_sample_123',
        projectId: projects[0].id,
        categoryId: 'category_1',
        name: 'ƒê√†o m√≥ng',
        description: 'ƒê√†o m√≥ng s√¢u 2m, r·ªông 1.5m',
        status: 'DONE' as const,
        priority: 1,
        estimatedHours: 40,
        actualHours: 45,
        dueDate: new Date('2024-02-15'),
        assignedTo: 'user_123',
        order: 1,
      },
      {
        id: 'task_2',
        orgId: 'org_sample_123',
        projectId: projects[0].id,
        categoryId: 'category_1',
        name: 'ƒê·ªï b√™ t√¥ng m√≥ng',
        description: 'ƒê·ªï b√™ t√¥ng m√≥ng C25',
        status: 'IN_PROGRESS' as const,
        priority: 2,
        estimatedHours: 24,
        actualHours: 12,
        dueDate: new Date('2024-02-28'),
        assignedTo: 'user_456',
        order: 2,
      },
      {
        id: 'task_3',
        orgId: 'org_sample_123',
        projectId: projects[0].id,
        categoryId: 'category_1',
        name: 'X√¢y t∆∞·ªùng t·∫ßng tr·ªát',
        description: 'X√¢y t∆∞·ªùng g·∫°ch ·ªëng 20cm',
        status: 'WAITING' as const,
        priority: 1,
        estimatedHours: 80,
        actualHours: null,
        dueDate: new Date('2024-03-15'),
        assignedTo: 'user_789',
        order: 3,
      },
    ];

    try {
      await db.insert(tasksSchema).values(tasksData);
      console.log('‚úÖ Tasks created:', tasksData.length);
    } catch (error) {
      console.log('‚ÑπÔ∏è Tasks already exist');
    }

    // 5. T·∫°o daily log m·∫´u cho project ƒë·∫ßu ti√™n
    const dailyLogData = {
      id: 'dailylog_1',
      orgId: 'org_sample_123',
      projectId: projects[0].id,
      categoryId: 'category_1',
      logDate: new Date('2024-02-20'),
      weather: 'N·∫Øng',
      temperature: 28.5,
      notes: 'Th·ªùi ti·∫øt t·ªët, ti·∫øn ƒë·ªô ƒë√∫ng k·∫ø ho·∫°ch',
      createdBy: 'user_123',
    };

    try {
      await db.insert(dailyLogsSchema).values(dailyLogData);
      console.log('‚úÖ Daily log created:', dailyLogData.id);
    } catch (error) {
      console.log('‚ÑπÔ∏è Daily log already exists');
    }

    // 6. T·∫°o daily log tasks m·∫´u
    const dailyLogTasksData = [
      {
        id: 'dailylogtask_1',
        orgId: 'org_sample_123',
        dailyLogId: 'dailylog_1',
        taskId: 'task_1',
        status: 'DONE' as const,
        progress: 100,
        notes: 'Ho√†n th√†nh ƒë√†o m√≥ng',
        hoursWorked: 45,
      },
      {
        id: 'dailylogtask_2',
        orgId: 'org_sample_123',
        dailyLogId: 'dailylog_1',
        taskId: 'task_2',
        status: 'IN_PROGRESS' as const,
        progress: 50,
        notes: 'ƒêang ƒë·ªï b√™ t√¥ng, ti·∫øn ƒë·ªô 50%',
        hoursWorked: 12,
      },
      {
        id: 'dailylogtask_3',
        orgId: 'org_sample_123',
        dailyLogId: 'dailylog_1',
        taskId: 'task_3',
        status: 'WAITING' as const,
        progress: 0,
        notes: 'Ch·ªù ho√†n th√†nh ƒë·ªï b√™ t√¥ng m√≥ng',
        hoursWorked: 0,
      },
    ];

    try {
      await db.insert(dailyLogTasksSchema).values(dailyLogTasksData);
      console.log('‚úÖ Daily log tasks created:', dailyLogTasksData.length);
    } catch (error) {
      console.log('‚ÑπÔ∏è Daily log tasks already exist');
    }

    console.log('üéâ Seed OK');
    console.log('üìä Summary:');
    console.log(`   - 1 Organization: org_sample_123`);
    console.log(`   - ${projects.length} Projects`);
    console.log(`   - 1 Category: ${categoryData.name}`);
    console.log(`   - ${tasksData.length} Tasks`);
    console.log(`   - 1 Daily Log`);
    console.log(`   - ${dailyLogTasksData.length} Daily Log Tasks`);
  } catch (error) {
    console.error('‚ùå Seed failed:', error);
    throw error;
  }
}

// Ch·∫°y seed
seed()
  .then(() => {
    console.log('‚úÖ Seed completed successfully');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Seed failed:', error);
    process.exit(1);
  });
