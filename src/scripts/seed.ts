/* eslint-disable no-console */
import { Client } from 'pg';

async function seed() {
  console.log('üå± Starting seed...');

  const client = new Client({
    connectionString: process.env.DATABASE_URL || 'postgresql://postgres:Khacbiet1!@localhost:5432/siteflow_dev',
  });

  try {
    await client.connect();
    console.log('‚úÖ Connected to database');

    // 1. T·∫°o organization m·∫´u
    const orgResult = await client.query(`
      INSERT INTO organization (id, stripe_customer_id, stripe_subscription_status)
      VALUES ('org_sample_123', 'cus_sample_123', 'active')
      ON CONFLICT (id) DO NOTHING
      RETURNING id
    `);
    console.log('‚úÖ Organization created:', orgResult.rows[0]?.id || 'already exists');

    // 2. T·∫°o 30+ projects m·∫´u
    const projectNames = [
      'D·ª± √°n nh√† ph·ªë 3 t·∫ßng',
'Chung c∆∞ cao c·∫•p',
'Bi·ªát th·ª± ven s√¥ng',
'Nh√† x∆∞·ªüng c√¥ng nghi·ªáp',
      'Trung t√¢m th∆∞∆°ng m·∫°i',
'B·ªánh vi·ªán ƒëa khoa',
'Tr∆∞·ªùng h·ªçc qu·ªëc t·∫ø',
'Kh√°ch s·∫°n 5 sao',
      'VƒÉn ph√≤ng cho thu√™',
'Khu d√¢n c∆∞ cao c·∫•p',
'Nh√† m√°y s·∫£n xu·∫•t',
'Kho b√£i logistics',
      'Trung t√¢m h·ªôi ngh·ªã',
'S√¢n v·∫≠n ƒë·ªông',
'B·∫£o t√†ng ngh·ªá thu·∫≠t',
'Th∆∞ vi·ªán c√¥ng c·ªông',
      'Trung t√¢m y t·∫ø',
'Nh√† ga t√†u ƒëi·ªán',
'C·∫ßu v∆∞·ª£t s√¥ng',
'ƒê∆∞·ªùng cao t·ªëc',
      'Khu du l·ªãch sinh th√°i',
'Resort bi·ªÉn',
'Golf course',
'S√¢n bay t∆∞ nh√¢n',
      'Nh√† m√°y ƒëi·ªán m·∫∑t tr·ªùi',
'Tr·∫°m x·ª≠ l√Ω n∆∞·ªõc',
'Khu c√¥ng ngh·ªá cao',
'Trung t√¢m d·ªØ li·ªáu',
      'Nh√† m√°y l·ªçc d·∫ßu',
'Khu ch·∫ø xu·∫•t',
'C·∫£ng bi·ªÉn',
'S√¢n bay qu·ªëc t·∫ø',
      'T√≤a nh√† vƒÉn ph√≤ng',
'Chung c∆∞ t·∫ßm trung',
'Nh√† ph·ªë li·ªÅn k·ªÅ',
'Bi·ªát th·ª± bi·ªÉn',
      'Khu ƒë√¥ th·ªã m·ªõi',
'Trung t√¢m th∆∞∆°ng m·∫°i',
'B·ªánh vi·ªán t∆∞ nh√¢n',
'Tr∆∞·ªùng ƒë·∫°i h·ªçc',
    ];

    const statuses = ['PLANNING', 'IN_PROGRESS', 'ON_HOLD', 'COMPLETED', 'CANCELLED'];
    const projects = [];

    for (let i = 0; i < 35; i++) {
      const name = `${projectNames[i % projectNames.length]} ${i + 1}`;
      const status = statuses[i % statuses.length];
      const budget = 1000000000 + (i * 100000000); // 1B to 4.5B
      const startDate = new Date(2024, 0, 1 + (i * 10));
      const endDate = new Date(2024, 11, 31 - (i * 5));

      const projectResult = await client.query(`
        INSERT INTO projects (org_id, name, description, status, budget, start_date, end_date, address, client_name, client_contact)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
        RETURNING id, name
      `, [
        'org_sample_123',
        name,
        `M√¥ t·∫£ chi ti·∫øt cho ${name}`,
        status,
        budget,
        startDate,
        endDate,
        `ƒê·ªãa ch·ªâ ${i + 1}, TP.HCM`,
        `Kh√°ch h√†ng ${i + 1}`,
        `090${String(i).padStart(7, '0')}`,
      ]);

      projects.push(projectResult.rows[0]);
    }

    console.log('‚úÖ Projects created:', projects.length);

    // 3. T·∫°o category m·∫´u cho project ƒë·∫ßu ti√™n
    const categoryResult = await client.query(`
      INSERT INTO categories (org_id, project_id, name, description, budget, "order")
      VALUES ('org_sample_123', $1, 'Ph·∫ßn m√≥ng v√† t·∫ßng tr·ªát', 'Thi c√¥ng ph·∫ßn m√≥ng, t·∫ßng tr·ªát v√† h·∫ßm', 800000000.00, 1)
      RETURNING id, name
    `, [projects[0].id]);
    console.log('‚úÖ Category created:', categoryResult.rows[0].name);

    // 4. T·∫°o tasks m·∫´u cho project ƒë·∫ßu ti√™n
    const tasksResult = await client.query(`
      INSERT INTO tasks (org_id, project_id, category_id, name, description, status, priority, estimated_hours, actual_hours, due_date, assigned_to, "order")
      VALUES 
        ('org_sample_123', $1, $2, 'ƒê√†o m√≥ng', 'ƒê√†o m√≥ng s√¢u 2m, r·ªông 1.5m', 'DONE', 1, 40, 45, '2024-02-15', 'user_123', 1),
        ('org_sample_123', $1, $2, 'ƒê·ªï b√™ t√¥ng m√≥ng', 'ƒê·ªï b√™ t√¥ng m√≥ng C25', 'IN_PROGRESS', 2, 24, 12, '2024-02-28', 'user_456', 2),
        ('org_sample_123', $1, $2, 'X√¢y t∆∞·ªùng t·∫ßng tr·ªát', 'X√¢y t∆∞·ªùng g·∫°ch ·ªëng 20cm', 'WAITING', 1, 80, null, '2024-03-15', 'user_789', 3)
      RETURNING id, name
    `, [projects[0].id, categoryResult.rows[0].id]);
    console.log('‚úÖ Tasks created:', tasksResult.rows.length);

    // 5. T·∫°o daily log m·∫´u cho project ƒë·∫ßu ti√™n
    const dailyLogResult = await client.query(`
      INSERT INTO daily_logs (org_id, project_id, category_id, log_date, weather, temperature, notes, created_by)
      VALUES ('org_sample_123', $1, $2, '2024-02-20', 'N·∫Øng', 28.5, 'Th·ªùi ti·∫øt t·ªët, ti·∫øn ƒë·ªô ƒë√∫ng k·∫ø ho·∫°ch', 'user_123')
      RETURNING id
    `, [projects[0].id, categoryResult.rows[0].id]);
    console.log('‚úÖ Daily log created:', dailyLogResult.rows[0].id);

    // 6. T·∫°o daily log tasks m·∫´u
    const dailyLogTasksResult = await client.query(`
      INSERT INTO daily_log_tasks (org_id, daily_log_id, task_id, status, progress, notes, hours_worked)
      VALUES 
        ('org_sample_123', $1, $2, 'DONE', 100, 'Ho√†n th√†nh ƒë√†o m√≥ng', 45),
        ('org_sample_123', $1, $3, 'IN_PROGRESS', 50, 'ƒêang ƒë·ªï b√™ t√¥ng, ti·∫øn ƒë·ªô 50%', 12),
        ('org_sample_123', $1, $4, 'WAITING', 0, 'Ch·ªù ho√†n th√†nh ƒë·ªï b√™ t√¥ng m√≥ng', 0)
      RETURNING id
    `, [
      dailyLogResult.rows[0].id,
      tasksResult.rows[0].id, // ƒê√†o m√≥ng
      tasksResult.rows[1].id, // ƒê·ªï b√™ t√¥ng m√≥ng
      tasksResult.rows[2].id, // X√¢y t∆∞·ªùng t·∫ßng tr·ªát
    ]);
    console.log('‚úÖ Daily log tasks created:', dailyLogTasksResult.rows.length);

    console.log('üéâ Seed OK');
    console.log('üìä Summary:');
    console.log(`   - 1 Organization: org_sample_123`);
    console.log(`   - ${projects.length} Projects`);
    console.log(`   - 1 Category: ${categoryResult.rows[0].name}`);
    console.log(`   - ${tasksResult.rows.length} Tasks`);
    console.log(`   - 1 Daily Log`);
    console.log(`   - ${dailyLogTasksResult.rows.length} Daily Log Tasks`);
  } catch (error) {
    console.error('‚ùå Seed failed:', error);
    throw error;
  } finally {
    await client.end();
  }
}

// Ch·∫°y seed
seed()
  .then(() => {
    console.log('‚úÖ Seed completed successfully');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Seed failed:', error);
    process.exit(1);
  });
